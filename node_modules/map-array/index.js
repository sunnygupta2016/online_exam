'use strict';

// customized for this use-case
var isObject = function (x) { return typeof x === 'object' &&
	x !== null &&
	!(x instanceof RegExp) &&
	!(x instanceof Error) &&
	!(x instanceof Date); };

var index = function mapObj(obj, fn, opts, seen) {
	opts = Object.assign({
		deep: false,
		target: {}
	}, opts);

	seen = seen || new WeakMap();

	if (seen.has(obj)) {
		return seen.get(obj);
	}

	seen.set(obj, opts.target);

	var target = opts.target;
	delete opts.target;

	for (var i = 0, list = Object.keys(obj); i < list.length; i += 1) {
		var key = list[i];

		var val = obj[key];
		var res = fn(key, val, obj);
		var newVal = res[1];

		if (opts.deep && isObject(newVal)) {
			if (Array.isArray(newVal)) {
				newVal = newVal.map(function (x) { return isObject(x) ? mapObj(x, fn, opts, seen) : x; });
			} else {
				newVal = mapObj(newVal, fn, opts, seen);
			}
		}

		target[res[0]] = newVal;
	}

	return target;
};

function mapToArray(obj, fn) {
	var idx = 0;
	var result = index(obj, function (key, value) { return [idx++, fn(key, value)]; }
	);
	result.length = idx;
	return Array.from(result);
}

var main = mapToArray;

module.exports = main;
